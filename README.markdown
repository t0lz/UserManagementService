# Система управления пользователями (gRPC)

## Описание

**Система управления пользователями** — это сервис, реализованный на Python с использованием gRPC и базы данных SQLite. Он предоставляет API для управления пользователями, включая создание, получение, обновление, удаление, аутентификацию и получение списка пользователей. Данные пользователя включают уникальный идентификатор (UUID), имя, email, хэш пароля и роль ("user" или "admin").

### Основные возможности
- Создание нового пользователя с уникальным email.
- Получение информации о пользователе по ID.
- Обновление данных пользователя (имя, email, пароль, роль).
- Удаление пользователя по ID.
- Аутентификация пользователя по email и паролю.
- Получение списка всех пользователей.

### Сценарий использования
Сервис предназначен для приложений, требующих управления учетными записями пользователей, таких как веб-приложения, мобильные приложения или внутренние системы. Он может быть интегрирован в системы, где требуется безопасное и эффективное управление пользователями через gRPC-протокол.

## Требования
- Python 3.8 или выше
- Библиотеки: `grpcio`, `grpcio-tools`
- SQLite (встроен в Python)

## Установка

1. **Установите зависимости**:
   ```bash
   pip install grpcio grpcio-tools
   ```
   

2. **Сгенерируйте Python-файлы из Protobuf**:
   Убедитесь, что файл `user.proto` находится в корневой директории, и выполните:
   ```bash
   python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. user.proto
   ```
   Это создаст файлы `user_pb2.py` и `user_pb2_grpc.py`.

## Запуск

1. **Запуск сервера**:
   - Убедитесь, что файл `server.py` содержит реализацию сервиса с ограничением `UNIQUE` на поле `email`.
   - Выполните:
     ```bash
     python server.py
     ```
   - Сервер запустится на порту `50051` и будет ожидать gRPC-запросы.

2. **Запуск клиента**:
   - Убедитесь, что сервер работает.
   - Выполните клиентский скрипт `client.py` для тестирования всех функций:
     ```bash
     python client.py
     ```

3. **Очистка базы данных** (опционально):
   - Клиентский скрипт автоматически очищает базу данных SQLite (`users.db`) перед каждым запуском.
   - Для ручной очистки удалите файл `users.db` или выполните:
     ```sql
     DELETE FROM users;
     ```

## Структура проекта
- `user.proto`: Protobuf-описание сервиса и сообщений.
- `server.py`: Реализация gRPC-сервера с SQLite-бэкендом.
- `client.py`: Клиентский скрипт для тестирования всех методов сервиса.
- `users.db`: Файл базы данных SQLite (создается автоматически).

## Примеры запросов и ответов

Ниже приведены примеры вызовов каждого метода сервиса через `client.py` и ожидаемые ответы. Предполагается, что сервер настроен с ограничением `UNIQUE` на поле `email` и использует SHA-256 для хэширования паролей.

### 1. Создание пользователя (`CreateUser`)
**Запрос**:
```python
response = stub.CreateUser(user_pb2.CreateUserRequest(
    name="Иван Иванов",
    email="ivan@example.com",
    passwordHash="пароль123",
    role="user"
))
```

**Ответ**:
```
Создание пользователя успешно: id: "<уникальный-uuid>"
name: "Иван Иванов"
email: "ivan@example.com"
passwordHash: "<хэш пароля>"
role: "user"
```

**Краевой случай (дублирующийся email)**:
**Запрос**:
```python
response = stub.CreateUser(user_pb2.CreateUserRequest(
    name="Иван Дубликат",
    email="ivan@example.com",
    passwordHash="пароль123",
    role="user"
))
```

**Ответ**:
```
Ошибка создания пользователя (дубликат): Пользователь с таким email уже существует
```

### 2. Получение пользователя (`GetUser`)
**Запрос**:
```python
response = stub.GetUser(user_pb2.GetUserRequest(id="<уникальный-uuid>"))
```

**Ответ**:
```
Получение пользователя успешно: id: "<уникальный-uuid>"
name: "Иван Иванов"
email: "ivan@example.com"
passwordHash: "<хэш пароля>"
role: "user"
```

**Краевой случай (несуществующий пользователь)**:
**Запрос**:
```python
response = stub.GetUser(user_pb2.GetUserRequest(id="несуществующий-id"))
```

**Ответ**:
```
Ошибка получения пользователя (несуществующий): Пользователь не найден
```

### 3. Обновление пользователя (`UpdateUser`)
**Запрос**:
```python
response = stub.UpdateUser(user_pb2.UpdateUserRequest(
    id="<уникальный-uuid>",
    name="Иван Обновленный",
    email="ivan_updated@example.com",
    passwordHash="новыйпароль",
    role="admin"
))
```

**Ответ**:
```
Обновление пользователя успешно: id: "<уникальный-uuid>"
name: "Иван Обновленный"
email: "ivan_updated@example.com"
passwordHash: "<новый хэш пароля>"
role: "admin"
```

**Краевой случай (несуществующий пользователь)**:
**Запрос**:
```python
response = stub.UpdateUser(user_pb2.UpdateUserRequest(
    id="несуществующий-id",
    name="Иван Обновленный",
    email="ivan_updated@example.com",
    passwordHash="новыйпароль",
    role="admin"
))
```

**Ответ**:
```
Ошибка обновления пользователя (несуществующий): Пользователь не найден
```

### 4. Вход пользователя (`Login`)
**Запрос**:
```python
response = stub.Login(user_pb2.LoginRequest(
    email="ivan_updated@example.com",
    passwordHash="новыйпароль"
))
```

**Ответ**:
```
Вход успешен: dummy-jwt-token
```

**Краевой случай (неверные учетные данные)**:
**Запрос**:
```python
response = stub.Login(user_pb2.LoginRequest(
    email="ivan_updated@example.com",
    passwordHash="неверныйпароль"
))
```

**Ответ**:
```
Ошибка входа (неверные данные): Неверные учетные данные
```

### 5. Список пользователей (`ListUsers`)
**Запрос**:
```python
response = stub.ListUsers(user_pb2.Empty())
```

**Ответ** (после создания одного пользователя):
```
Список пользователей успешно получен:
id: "<уникальный-uuid>"
name: "Иван Обновленный"
email: "ivan_updated@example.com"
passwordHash: "<новый хэш пароля>"
role: "admin"
```

### 6. Удаление пользователя (`DeleteUser`)
**Запрос**:
```python
response = stub.DeleteUser(user_pb2.DeleteUserRequest(id="<уникальный-uuid>"))
```

**Ответ**:
```
Удаление пользователя успешно
```

**Краевой случай (несуществующий пользователь)**:
**Запрос**:
```python
response = stub.DeleteUser(user_pb2.DeleteUserRequest(id="<уникальный-uuid>"))
```

**Ответ**:
```
Ошибка удаления пользователя (несуществующий): Пользователь не найден
```

- **Тестирование**:
  - Клиентский скрипт (`client.py`) тестирует все методы сервиса. Для автоматизированного тестирования добавьте тесты с использованием `unittest`.
